syntax = "proto3";

package halite_proto;

message Status {
}

message State {
    bytes state = 1;
    bytes params = 2;
}

message StateBatch {
    repeated State batch = 1;
}

message ActionBatch {
    repeated int32 actions = 1;
}

message Qvals {
    repeated float qvals = 1;
}

message QvalsBatch {
    repeated Qvals batch = 1;
}

message HistoryEntry {
    int32 owner_id = 1;
    int32 env_id = 2;
    State state = 3;
    int32 action = 4;
    float reward = 5;
    State new_state = 6;
    bool done = 7;
    int32 step = 8;
    repeated float logits = 9;
}

message Trajectory {
    int32 owner_id = 1;
    int32 env_id = 2;
    repeated HistoryEntry entries = 3;
    repeated float c_state = 4;
    repeated float h_state = 5;
    int32 train_step = 6;
}

message FrozenGraph {
    bytes graph_def = 1;
    string prefix = 2;
    bytes checkpoint_index = 3;
    bytes checkpoint_data = 4;
    bytes saver_def = 5;
    bytes frozen_graph = 6;
    int32 train_step = 7;
    int32 trajectory_len = 8;
}

service HaliteProcess {
    rpc GetFrozenGraph(Status) returns (FrozenGraph) {}
    rpc HistoryAppend(Trajectory) returns (Status) {}
}
